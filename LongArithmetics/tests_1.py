from BigNumber import BigNumber, Operations
import unittest


class TestLongBigNumbers_Lab1(unittest.TestCase):

    def test_sum_1(self):
        num1 = BigNumber(981234719201243134124728461234123412933947812394871290834710942340, 2**32)
        num2 = BigNumber(2346198246328917468237641929879883809238409237436, 2**32)

        add = Operations.add(num1,num2)
        self.assertEqual(add.to_10bint(), 981234719201243136470926707563040881171589742274755100073120179776)
    
    def test_sum_2(self):
        num1 = BigNumber(524526508, 2**32)
        num2 = BigNumber(3984900600, 2**32)

        add = Operations.add(num1,num2)
        self.assertEqual(add.to_10bint(), 4509427108)

    def test_sum_3(self):
        num1 = BigNumber(1, 2**32)
        num2 = BigNumber(1, 2**32)

        add = Operations.add(num1,num2)
        self.assertEqual(add.to_10bint(), 2)
        
    def test_sum_4(self):
        num1 = BigNumber(2**32, 2**32)
        num2 = BigNumber(2**32, 2**32)

        add = Operations.add(num1,num2)
        self.assertEqual(add.to_10bint(), 8589934592)

    def test_sum_5(self):
        num1 = BigNumber(2**33, 2**32)
        num2 = BigNumber(2**33, 2**32)

        add = Operations.add(num1,num2)
        self.assertEqual(add.to_10bint(), 17179869184)

    def test_sum_6(self):
        num1 = BigNumber(2**64 + 2**32 - 1, 2**32)
        num2 = BigNumber(2**128 + 2**16, 2**32)

        add = Operations.add(num1,num2)
        self.assertEqual(add.to_10bint(), 340282366920938463481821351509772795903)
    
    def test_sum_7(self):
        num1 = BigNumber(2**128, 2**32)
        num2 = BigNumber(1, 2**32)

        add = Operations.add(num1,num2)
        self.assertEqual(add.to_10bint(), 340282366920938463463374607431768211457)

    def test_sub_1(self):
        num1 = BigNumber(981234719201243134124728461234123412933947812394871290834710942340, 2**32)
        num2 = BigNumber(2346198246328917468237641929879883809238409237436, 2**32)
        sub = Operations.sub(num1,num2)
        self.assertEqual(sub.to_10bint(), 981234719201243131778530214905205944696305882514987481596301704904)
    
    def test_sub_2(self):
        num1 = BigNumber(9812347192012431341247284612394871290834710942340, 2**32)
        num2 = BigNumber(9812347192012431341247284612394852384728934729834, 2**32)
        sub = Operations.sub(num1,num2)
        self.assertEqual(sub.to_10bint(), 18906105776212506)
    
    def test_sub_3(self):
        num1 = BigNumber(21348719283756712983419236441298374, 2**32)
        num2 = BigNumber(72394872384729384729834729384729, 2**32)
        sub = Operations.sub(num1,num2)
        self.assertEqual(sub.to_10bint(), 21276324411371983598689401711913645)
    
    def test_sub_4(self):
        num1 = BigNumber(72134932562394871764531859749865729034, 2**32)
        num2 = BigNumber(5786278384712835463287461628347197234, 2**32)
        sub = Operations.sub(num1,num2)
        self.assertEqual(sub.to_10bint(), 66348654177682036301244398121518531800)
    
    def test_sub_5(self):
        num1 = BigNumber(399579347146422797009697964653308466854, 2**32)
        num2 = BigNumber(100175957659691278902986257890128252949, 2**32)
        sub = Operations.sub(num1,num2)
        self.assertEqual(sub.to_10bint(), 299403389486731518106711706763180213905)
    
    def test_sub_6(self):
        num1 = BigNumber(299403389486731518106711706763180213905, 2**32)
        num2 = BigNumber(84843000392746500277345932137348090994, 2**32)
        sub = Operations.sub(num1,num2)
        self.assertEqual(sub.to_10bint(), 214560389093985017829365774625832122911)

    def test_sub_7(self):
        num1 = BigNumber(4745474358278964097288088136035110103749696268, 2**32)
        num2 = BigNumber(1447355894914782279693773843307988210931466240, 2**32)
        sub = Operations.sub(num1,num2)
        self.assertEqual(sub.to_10bint(), 3298118463364181817594314292727121892818230028)


    def test_mult_1(self):
        num1 = BigNumber(981234719201243134124728461234123412933947812394871290834710942340, 2**32)
        num2 = BigNumber(2346198246328917468237641929879883809238409237436, 2**32)
        mul = Operations.multiply(num1,num2)
        self.assertEqual(mul.to_10bint(), 2302171177427004401889527047438598728509002965146275378314198208827002105483760524449559280585370984742764365440240)

    def test_mul_2(self):
        num1 = BigNumber(2918347190283471567239048791283567129034768578761273948717982356129034817983561723948717928356128934719561289374, 2**32)
        num2 = BigNumber(4709123956767329048177953671230948756792347827356092347190825762736471290834712567, 2**32)
        mul = Operations.multiply(num1,num2)
        self.assertEqual(mul.to_10bint(), 13742858667928518959903291125948365205411663302791247646208616300010737655948270943404663144279028333704727788269892050095408546430317558753853850355897924922387934424803617290073501427201363058)
    
    def test_mul_3(self):
        num1 = BigNumber(4527, 8)
        num2 = BigNumber(9873, 8)
        mul = Operations.multiply(num1,num2)
        self.assertEqual(mul.to_10bint(), 44695071)
    
    def test_mul_4(self):
        num1 = BigNumber.from_16b('607883301e112d7f43da810ff4c19833', 2**16)
        num2 = BigNumber.from_16b('22210d1223282d6030d8890b7a4f4f22', 2**16)

        mul = Operations.multiply(num1,num2)
        self.assertEqual(mul.to_16b(), 'cdc75e241947108433952dbf4cb59dec95a39a54a105273f936b01d856af3c6')

    def test_convert_to10bfrom16b(self):
        num1 = BigNumber.from_16b('607883301e112d7f43da810ff4c19833', 10)

        self.assertEqual(num1.to_10bint(), 128231624026291299055394268430303598643)

    def test_read_16b(self):
        num = BigNumber.from_16b('1f630dc14445ba417218cc2a7666eab74a8e294810e06918bf8c9955a9fbe95225bae29953afbf1d4ea93adbc342238fd38cb58c052ddf0747c2d634adc300499f058af68f25947a428a80d086e3cea15679dba3bff6c62f680f7f470f5dbb519271c5b1a0c298fcd037db4c337ce51e2b90e02538bbd774c9ae6a2aa3db632c9337fbb95d6d33fe2c54ed24a7cb16fc05638659fa277aae7f4dad329cbbd908292a82ee4336289e548e24efd83ddff52bbf0a75bbe8717d987b4b0b3177698b2eb5d375001f5b0dcd2aa65e7af785338d78bebed34c6874f169907968f5cd11aa89ce2194c695b831ec305bb5b687a566e3c792c01932f83e43', 2**4)
        self.assertEqual(num.to_10bint(), 14076678201135072616114117282339279437876951566724273834935658448208687954475575267795291987725884043613197506118698461813496739331425696753135750849882259098408949181402113076106362831196925260856592353993343504313790753676147814623772073797722376871112649971922375757489727217633853744560110054192589874599857150121718902613671127857596938340576608565106708062965679597157224062851077876611504638908666061845245084911117387106037782391859240533652846665519333261142543781602025680796043668725612782337201932795850227806833595062021166984794614728694178153377209857594110692231233587364830146576531011)

    def test_read_16b_2(self):
        num = BigNumber.from_16b('f143ce95c6ec034bed56425d9bf12c2ec255c3f481a2265f471e87189a546aadda095acd6a4e8dd81ef8a7c9eacbff1c5c7a5898096491335f86ee7e96b2761024b643afbf3a01ea6e1b1e1ca2cf0773b3909808a7b6c947ac5275b63bab4b973ffded9ab171a85258466d743b2d309dbe401cb445f415a02f68ff7d8434e395994e9ae5cdb76a3ecc503ba26bd32dc2c9433848096da0c1aaef8d0dbf7f051de81523cc5526152a83da8f4cdf7365a14492fd090957eda02026216eca2efb6eb0f92871d174b29bec525cf1b7cc2e87bb08d501aaa4fd21c841b97e0976992ac37a8abcb05e6b57ff26a65ff14cbfcbff98429abac509e5de6a', 2**4)
        self.assertEqual(num.to_10bint(), 108204532840880086458821226679975803027851417304163293772482070747322223752730576902384936131378171826755519786705877801463027140770786781727099928358680286399111493921383224328384637783012272754279291444322850089275972470119446771871477843582690476148245307457352927911393249017183682430469770104181530020360331294692173587384784502002586682399701246576138163479348943370530350823185273478559739348374779000963841023335432635692993262954116940437968451685836594833986109470080175762993823624556195790456699353704291115136811961218327977294493534482956977344274500027032974101662559389799616537891823210)


    def test_convert_to2b(self):
        num1 = BigNumber.from_16b('607883301e112d7f43da810ff4c19833', 2**16)
        self.assertEqual(num1.print_2b(), '1100000011110001000001100110000000111100001000100101101011111110100001111011010100000010000111111110100110000011001100000110011')

    def test_comparison_1(self):
        num1 = BigNumber(3412873648264, 8)
        num2 = BigNumber(3412873648263, 8)
        self.assertEqual(Operations.long_comparison(num1, num2), 1)
    def test_comparison_2(self):
        num1 = BigNumber(3412873648264, 8)
        num2 = BigNumber(3412873648265, 8)
        self.assertEqual(Operations.long_comparison(num1, num2), -1)
    def test_comparison_3(self):
        num1 = BigNumber(4412873648265, 8)
        num2 = BigNumber(3412873648265, 8)
        self.assertEqual(Operations.long_comparison(num1, num2), 1)
    def test_comparison_4(self):
        num1 = BigNumber(3412773648265, 8)
        num2 = BigNumber(3412873648265, 8)
        self.assertEqual(Operations.long_comparison(num1, num2), -1)
    def test_comparison_5(self):                                                ### smth gn wrng
        num1 = BigNumber(10000000, 8)
        num2 = BigNumber(10000000000, 8)
        self.assertEqual(Operations.long_comparison(num1, num2), -1)
    def test_comparison_6(self):
        num1 = BigNumber(39821471923749124, 8)
        num2 = BigNumber(4891538001, 8)
        self.assertEqual(Operations.long_comparison(num1, num2), 1)
    def test_comparison_6(self):
        num1 = BigNumber(39821471923749124, 8)
        num2 = BigNumber(4891538001, 8)
        self.assertEqual(Operations.long_comparison(num1, num2), 1)

    def test_div_1(self):
        num1 = BigNumber(981234719201243134124728461234123412933947812394871290834710942340, 2**32)
        num2 = BigNumber(2346198246328917468237641929879883809238409237436, 2**32)
        div, rem = Operations.div(num1,num2)
        self.assertEqual(div.to_10bint(), 418223277055370449)

    def test_div_2(self):
        num1 = BigNumber(2918347190283471567239048791283567129034768578761273948717982356129034817983561723948717928356128934719561289374, 2**32)
        num2 = BigNumber(4709123956767329048177953671230948756792347827356092347190825762736471290834712567, 2**32)
        div, rem = Operations.div(num1,num2)
        self.assertEqual(div.to_10bint(), 619721888205896477070134280916)

    def test_div_3(self):
        num1 = BigNumber(812387865981237586982347569812374978651293847756091237498760129857576841034712934789561293847029578904832127409178576487612834901237401950918235984691287346105715941273495767834417234019874782659183476582937429178568973651829034718934765839847529384756729834756178650912783498764351293874123765789126349812757812364731832947, 2**32)
        num2 = BigNumber(979238741566198234772132412983476156417847624074610249162384761274901481762340122134123412341255590763495672985794450294750938457879162346108509138247102934871897561092834769873561203478819237490150123486512938741273568912374781568729137498756283174691236512834761785661823470195780934857324856109231241916430912873502387463, 2**32)
        div, rem = Operations.div(num1,num2)
        self.assertEqual(div.to_10bint(), 0)

    def test_rem_1(self):
        num1 = BigNumber(981234719201243134124728461234123412933947812394871290834710942340, 2**32)
        num2 = BigNumber(2346198246328917468237641929879883809238409237436, 2**32)
        div, rem = Operations.div(num1,num2)
        self.assertEqual(rem.to_10bint(), 353593676666892717496341744261955225540132013576)

    def test_rem_2(self):
        num1 = BigNumber(2918347190283471567239048791283567129034768578761273948717982356129034817983561723948717928356128934719561289374, 2**32)
        num2 = BigNumber(4709123956767329048177953671230948756792347827356092347190825762736471290834712567, 2**32)
        div, rem = Operations.div(num1,num2)
        self.assertEqual(rem.to_10bint(), 3056752573856112239245181233193790722461659480060293872083113231608421467818002)
    
    def test_rem_3(self):
        num1 = BigNumber(812387865981237586982347569812374978651293847756091237498760129857576841034712934789561293847029578904832127409178576487612834901237401950918235984691287346105715941273495767834417234019874782659183476582937429178568973651829034718934765839847529384756729834756178650912783498764351293874123765789126349812757812364731832947, 2**32)
        num2 = BigNumber(979238741566198234772132412983476156417847624074610249162384761274901481762340122134123412341255590763495672985794450294750938457879162346108509138247102934871897561092834769873561203478819237490150123486512938741273568912374781568729137498756283174691236512834761785661823470195780934857324856109231241916430912873502387463, 2**32)
        div, rem = Operations.div(num1,num2)
        self.assertEqual(rem.to_10bint(), 812387865981237586982347569812374978651293847756091237498760129857576841034712934789561293847029578904832127409178576487612834901237401950918235984691287346105715941273495767834417234019874782659183476582937429178568973651829034718934765839847529384756729834756178650912783498764351293874123765789126349812757812364731832947)


    # def test_power(self):
    #     num1 = BigNumber(812387865981237586982347569812374978651293847756091237498760129857576841034712934789561293847029578904832127409178576487612834901237401950918235984691287346105715941273495767834417234019874782659183476582937429178568973651829034718934765839847529384756729834756178650912783498764351293874123765789126349812757812364731832947, 2**32)
    #     num2 = BigNumber(21347618364128347656128394787561238324154234241513497121351324134, 2**32)
    #     div, rem = Operations.power(num1,num2)
    #     self.assertEqual(rem.to_10bint(), )


if __name__ == '__main__':
    try:
        unittest.main()
    except:
        print()